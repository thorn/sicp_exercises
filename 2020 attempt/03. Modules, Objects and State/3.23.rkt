#lang sicp

(define (make-dequeue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty-deque?) (null? front-ptr))
    (define (front-insert-deque! item)
      (let ((new-pair (cons (cons item '()) front-ptr)))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else
               (set-cdr! rear-ptr new-pair)
               (set-rear-ptr! new-pair)))))
    (define (front-delete-dequeue!)
      (cond ((empty-deque?) (error "DELETE called on an empty queue"))
            (else (set-front-ptr! (cdr front-ptr))
                  (unless (empty-deque?)) (set-cdr! (car front-ptr) null)))))
    (define (rear-insert-deque! item) "REAR-INSERT-DEQUE!")
    (define (rear-delete-deque! item) "REAR-DELETE-DEQUE!")

    (define (print-queue) front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue!))
            ((eq? m 'print-queue) (print-queue))
            (else (error "Unknown message DISPATCH" m))))
    dispatch))
      

(define q1 (make-queue))
((q1 'insert-queue!) 'a)
((q1 'insert-queue!) 'b)
((q1 'insert-queue!) 'c)
(q1 'print-queue)
(q1 'delete-queue!)
(q1 'print-queue)
(q1 'delete-queue!)
(q1 'print-queue)
(q1 'delete-queue!)
(q1 'print-queue)
