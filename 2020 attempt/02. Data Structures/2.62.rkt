#lang racket

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((= x (car set)) set)
        ((< x (car set)) (cons x set))
        (else (cons (car set) (adjoin-set x (cdr set))))))

(define (adjoin-set-iterative x set)
  (define (adjoin-set-iter x left right)
    (cond ((null? right) (append left (list x)))
          ((= (car right) x) (append left right))
          ((< x (car right)) (append left (cons x right)))
          (else (adjoin-set-iter x (append left (list (car right))) (cdr right)))))
  (adjoin-set-iter x '() set))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2) (cons x1 (intersection-set (cdr set1) (cdr set2))))
              ((< x1 x2) (intersection-set (cdr set1) set2))
              ((< x2 x1) (intersection-set set1 (cdr set2)))))))

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else
         (let ((x1 (car set1)) (rest1 (cdr set1))
               (x2 (car set2)) (rest2 (cdr set2)))
               (cond ((= x1 x2) (cons x1 (union-set rest1 rest2)))
                     ((< x1 x2) (cons x1 (union-set rest1 set2)))
                     (else (cons x2 (union-set set1 rest2))))))))

(adjoin-set 4 (list 1 2 3))
(adjoin-set 3 (list 1 2 4 5))
(adjoin-set 1 (list 2 3 4))
(adjoin-set 2 (list 1 2 3 4))
(intersection-set (list 1 2 3) (list 2 3 4))
(union-set (list 0 1 2 3) (list 2 3 4))
